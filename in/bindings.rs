/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uint = 1;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: ::std::os::raw::c_uint = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 3;
pub const __MAC_10_0: ::std::os::raw::c_uint = 1000;
pub const __MAC_10_1: ::std::os::raw::c_uint = 1010;
pub const __MAC_10_2: ::std::os::raw::c_uint = 1020;
pub const __MAC_10_3: ::std::os::raw::c_uint = 1030;
pub const __MAC_10_4: ::std::os::raw::c_uint = 1040;
pub const __MAC_10_5: ::std::os::raw::c_uint = 1050;
pub const __MAC_10_6: ::std::os::raw::c_uint = 1060;
pub const __MAC_10_7: ::std::os::raw::c_uint = 1070;
pub const __MAC_10_8: ::std::os::raw::c_uint = 1080;
pub const __MAC_10_9: ::std::os::raw::c_uint = 1090;
pub const __MAC_10_10: ::std::os::raw::c_uint = 101000;
pub const __MAC_10_10_2: ::std::os::raw::c_uint = 101002;
pub const __MAC_10_10_3: ::std::os::raw::c_uint = 101003;
pub const __MAC_10_11: ::std::os::raw::c_uint = 101100;
pub const __MAC_10_11_2: ::std::os::raw::c_uint = 101102;
pub const __MAC_10_11_3: ::std::os::raw::c_uint = 101103;
pub const __MAC_10_11_4: ::std::os::raw::c_uint = 101104;
pub const __MAC_10_12: ::std::os::raw::c_uint = 101200;
pub const __MAC_10_12_1: ::std::os::raw::c_uint = 101201;
pub const __MAC_10_12_2: ::std::os::raw::c_uint = 101202;
pub const __MAC_10_12_4: ::std::os::raw::c_uint = 101204;
pub const __IPHONE_2_0: ::std::os::raw::c_uint = 20000;
pub const __IPHONE_2_1: ::std::os::raw::c_uint = 20100;
pub const __IPHONE_2_2: ::std::os::raw::c_uint = 20200;
pub const __IPHONE_3_0: ::std::os::raw::c_uint = 30000;
pub const __IPHONE_3_1: ::std::os::raw::c_uint = 30100;
pub const __IPHONE_3_2: ::std::os::raw::c_uint = 30200;
pub const __IPHONE_4_0: ::std::os::raw::c_uint = 40000;
pub const __IPHONE_4_1: ::std::os::raw::c_uint = 40100;
pub const __IPHONE_4_2: ::std::os::raw::c_uint = 40200;
pub const __IPHONE_4_3: ::std::os::raw::c_uint = 40300;
pub const __IPHONE_5_0: ::std::os::raw::c_uint = 50000;
pub const __IPHONE_5_1: ::std::os::raw::c_uint = 50100;
pub const __IPHONE_6_0: ::std::os::raw::c_uint = 60000;
pub const __IPHONE_6_1: ::std::os::raw::c_uint = 60100;
pub const __IPHONE_7_0: ::std::os::raw::c_uint = 70000;
pub const __IPHONE_7_1: ::std::os::raw::c_uint = 70100;
pub const __IPHONE_8_0: ::std::os::raw::c_uint = 80000;
pub const __IPHONE_8_1: ::std::os::raw::c_uint = 80100;
pub const __IPHONE_8_2: ::std::os::raw::c_uint = 80200;
pub const __IPHONE_8_3: ::std::os::raw::c_uint = 80300;
pub const __IPHONE_8_4: ::std::os::raw::c_uint = 80400;
pub const __IPHONE_9_0: ::std::os::raw::c_uint = 90000;
pub const __IPHONE_9_1: ::std::os::raw::c_uint = 90100;
pub const __IPHONE_9_2: ::std::os::raw::c_uint = 90200;
pub const __IPHONE_9_3: ::std::os::raw::c_uint = 90300;
pub const __IPHONE_10_0: ::std::os::raw::c_uint = 100000;
pub const __IPHONE_10_1: ::std::os::raw::c_uint = 100100;
pub const __IPHONE_10_2: ::std::os::raw::c_uint = 100200;
pub const __IPHONE_10_3: ::std::os::raw::c_uint = 100300;
pub const __TVOS_9_0: ::std::os::raw::c_uint = 90000;
pub const __TVOS_9_1: ::std::os::raw::c_uint = 90100;
pub const __TVOS_9_2: ::std::os::raw::c_uint = 90200;
pub const __TVOS_10_0: ::std::os::raw::c_uint = 100000;
pub const __TVOS_10_0_1: ::std::os::raw::c_uint = 100001;
pub const __TVOS_10_1: ::std::os::raw::c_uint = 100100;
pub const __TVOS_10_2: ::std::os::raw::c_uint = 100200;
pub const __WATCHOS_1_0: ::std::os::raw::c_uint = 10000;
pub const __WATCHOS_2_0: ::std::os::raw::c_uint = 20000;
pub const __WATCHOS_2_1: ::std::os::raw::c_uint = 20100;
pub const __WATCHOS_2_2: ::std::os::raw::c_uint = 20200;
pub const __WATCHOS_3_0: ::std::os::raw::c_uint = 30000;
pub const __WATCHOS_3_1: ::std::os::raw::c_uint = 30100;
pub const __WATCHOS_3_1_1: ::std::os::raw::c_uint = 30101;
pub const __WATCHOS_3_2: ::std::os::raw::c_uint = 30200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: ::std::os::raw::c_uint = 101204;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uint = 16;
pub const __DARWIN_WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const _FORTIFY_SOURCE: ::std::os::raw::c_uint = 2;
pub const RENAME_SECLUDE: ::std::os::raw::c_uint = 1;
pub const RENAME_SWAP: ::std::os::raw::c_uint = 2;
pub const RENAME_EXCL: ::std::os::raw::c_uint = 4;
pub const __SLBF: ::std::os::raw::c_uint = 1;
pub const __SNBF: ::std::os::raw::c_uint = 2;
pub const __SRD: ::std::os::raw::c_uint = 4;
pub const __SWR: ::std::os::raw::c_uint = 8;
pub const __SRW: ::std::os::raw::c_uint = 16;
pub const __SEOF: ::std::os::raw::c_uint = 32;
pub const __SERR: ::std::os::raw::c_uint = 64;
pub const __SMBF: ::std::os::raw::c_uint = 128;
pub const __SAPP: ::std::os::raw::c_uint = 256;
pub const __SSTR: ::std::os::raw::c_uint = 512;
pub const __SOPT: ::std::os::raw::c_uint = 1024;
pub const __SNPT: ::std::os::raw::c_uint = 2048;
pub const __SOFF: ::std::os::raw::c_uint = 4096;
pub const __SMOD: ::std::os::raw::c_uint = 8192;
pub const __SALC: ::std::os::raw::c_uint = 16384;
pub const __SIGN: ::std::os::raw::c_uint = 32768;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 1024;
pub const EOF: ::std::os::raw::c_int = -1;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 20;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 1024;
pub const TMP_MAX: ::std::os::raw::c_uint = 308915776;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const L_ctermid: ::std::os::raw::c_uint = 1024;
pub const __CTERMID_DEFINED: ::std::os::raw::c_uint = 1;
pub const _USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 2;
pub const __DARWIN_CLK_TCK: ::std::os::raw::c_uint = 100;
pub const CHAR_BIT: ::std::os::raw::c_uint = 8;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 6;
pub const CLK_TCK: ::std::os::raw::c_uint = 100;
pub const SCHAR_MAX: ::std::os::raw::c_uint = 127;
pub const SCHAR_MIN: ::std::os::raw::c_int = -128;
pub const UCHAR_MAX: ::std::os::raw::c_uint = 255;
pub const CHAR_MAX: ::std::os::raw::c_uint = 127;
pub const CHAR_MIN: ::std::os::raw::c_int = -128;
pub const USHRT_MAX: ::std::os::raw::c_uint = 65535;
pub const SHRT_MAX: ::std::os::raw::c_uint = 32767;
pub const SHRT_MIN: ::std::os::raw::c_int = -32768;
pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const ULONG_MAX: ::std::os::raw::c_int = -1;
pub const LONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ULLONG_MAX: ::std::os::raw::c_int = -1;
pub const LLONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LLONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const LONG_BIT: ::std::os::raw::c_uint = 64;
pub const SSIZE_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const WORD_BIT: ::std::os::raw::c_uint = 32;
pub const SIZE_T_MAX: ::std::os::raw::c_int = -1;
pub const UQUAD_MAX: ::std::os::raw::c_int = -1;
pub const QUAD_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const QUAD_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ARG_MAX: ::std::os::raw::c_uint = 262144;
pub const CHILD_MAX: ::std::os::raw::c_uint = 266;
pub const GID_MAX: ::std::os::raw::c_uint = 2147483647;
pub const LINK_MAX: ::std::os::raw::c_uint = 32767;
pub const MAX_CANON: ::std::os::raw::c_uint = 1024;
pub const MAX_INPUT: ::std::os::raw::c_uint = 1024;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 16;
pub const UID_MAX: ::std::os::raw::c_uint = 2147483647;
pub const OPEN_MAX: ::std::os::raw::c_uint = 10240;
pub const PATH_MAX: ::std::os::raw::c_uint = 1024;
pub const PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 2;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const NZERO: ::std::os::raw::c_uint = 20;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 512;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 8192;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_SS_REPL_MAX: ::std::os::raw::c_uint = 4;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 30;
pub const _POSIX_TRACE_NAME_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TRACE_SYS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const OFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const OFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const PASS_MAX: ::std::os::raw::c_uint = 128;
pub const NL_ARGMAX: ::std::os::raw::c_uint = 9;
pub const NL_LANGMAX: ::std::os::raw::c_uint = 14;
pub const NL_MSGMAX: ::std::os::raw::c_uint = 32767;
pub const NL_NMAX: ::std::os::raw::c_uint = 1;
pub const NL_SETMAX: ::std::os::raw::c_uint = 255;
pub const NL_TEXTMAX: ::std::os::raw::c_uint = 2048;
pub const _XOPEN_IOV_MAX: ::std::os::raw::c_uint = 16;
pub const IOV_MAX: ::std::os::raw::c_uint = 1024;
pub const _XOPEN_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _XOPEN_PATH_MAX: ::std::os::raw::c_uint = 1024;
pub const __64BIT__: ::std::os::raw::c_uint = 1;
pub const TA_INTEGER_MIN: ::std::os::raw::c_int = -2147483647;
pub const TA_INTEGER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TA_REAL_MIN: f64 = -30000000000000000000000000000000000000.;
pub const TA_REAL_MAX: f64 = 30000000000000000000000000000000000000.;
pub const TA_INTEGER_DEFAULT: ::std::os::raw::c_int = -2147483648;
pub const TA_REAL_DEFAULT: f64 = -40000000000000000000000000000000000000.;
pub const TA_FUNC_FLG_OVERLAP: ::std::os::raw::c_uint = 16777216;
pub const TA_FUNC_FLG_VOLUME: ::std::os::raw::c_uint = 67108864;
pub const TA_FUNC_FLG_UNST_PER: ::std::os::raw::c_uint = 134217728;
pub const TA_FUNC_FLG_CANDLESTICK: ::std::os::raw::c_uint = 268435456;
pub const TA_IN_PRICE_OPEN: ::std::os::raw::c_uint = 1;
pub const TA_IN_PRICE_HIGH: ::std::os::raw::c_uint = 2;
pub const TA_IN_PRICE_LOW: ::std::os::raw::c_uint = 4;
pub const TA_IN_PRICE_CLOSE: ::std::os::raw::c_uint = 8;
pub const TA_IN_PRICE_VOLUME: ::std::os::raw::c_uint = 16;
pub const TA_IN_PRICE_OPENINTEREST: ::std::os::raw::c_uint = 32;
pub const TA_IN_PRICE_TIMESTAMP: ::std::os::raw::c_uint = 64;
pub const TA_OPTIN_IS_PERCENT: ::std::os::raw::c_uint = 1048576;
pub const TA_OPTIN_IS_DEGREE: ::std::os::raw::c_uint = 2097152;
pub const TA_OPTIN_IS_CURRENCY: ::std::os::raw::c_uint = 4194304;
pub const TA_OPTIN_ADVANCED: ::std::os::raw::c_uint = 16777216;
pub const TA_OUT_LINE: ::std::os::raw::c_uint = 1;
pub const TA_OUT_DOT_LINE: ::std::os::raw::c_uint = 2;
pub const TA_OUT_DASH_LINE: ::std::os::raw::c_uint = 4;
pub const TA_OUT_DOT: ::std::os::raw::c_uint = 8;
pub const TA_OUT_HISTO: ::std::os::raw::c_uint = 16;
pub const TA_OUT_PATTERN_BOOL: ::std::os::raw::c_uint = 32;
pub const TA_OUT_PATTERN_BULL_BEAR: ::std::os::raw::c_uint = 64;
pub const TA_OUT_PATTERN_STRENGTH: ::std::os::raw::c_uint = 128;
pub const TA_OUT_POSITIVE: ::std::os::raw::c_uint = 256;
pub const TA_OUT_NEGATIVE: ::std::os::raw::c_uint = 512;
pub const TA_OUT_ZERO: ::std::os::raw::c_uint = 1024;
pub const TA_OUT_UPPER_LIMIT: ::std::os::raw::c_uint = 2048;
pub const TA_OUT_LOWER_LIMIT: ::std::os::raw::c_uint = 4096;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __mbstate8: __BindgenUnionField<[::std::os::raw::c_char; 128usize]>,
    pub _mbstateL: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __mbstate8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( _mbstateL ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(::std::mem::size_of::<__darwin_pthread_handler_rec>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ));
    assert_eq! (::std::mem::align_of::<__darwin_pthread_handler_rec>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_pthread_handler_rec )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) .
                __routine as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! (
                __routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __arg
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __next
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next )
                ));
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_attr_t>() , 64usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_attr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_cond_t>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_cond_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_condattr_t>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_condattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_condattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __sig as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque )
                ));
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutex_t>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutex_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutexattr_t>() , 16usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutexattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_once_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_once_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlock_t>() , 200usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlock_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque )
                ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_t>() , 8192usize , concat
               ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __sig as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __cleanup_stack
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __cleanup_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __opaque as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __opaque ) ));
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(arg1: ::std::os::raw::c_int,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int,
                        arg4: *const ::std::os::raw::c_char,
                        arg5: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(::std::mem::size_of::<__sbuf>() , 16usize , concat ! (
               "Size of: " , stringify ! ( __sbuf ) ));
    assert_eq! (::std::mem::align_of::<__sbuf>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _base as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _size as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _size ) ));
}
impl Clone for __sbuf {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(::std::mem::size_of::<__sFILE>() , 152usize , concat ! (
               "Size of: " , stringify ! ( __sFILE ) ));
    assert_eq! (::std::mem::align_of::<__sFILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sFILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _p as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _p ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _r as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _r ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _w as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _file as * const _ as usize
                } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _file ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _bf as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _bf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lbfsize as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lbfsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _cookie as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _cookie ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _close as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _close ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _read as * const _ as usize
                } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _seek as * const _ as usize
                } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _seek ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _write as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ub as * const _ as usize }
                , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ub ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _extra as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _extra ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ur as * const _ as usize }
                , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ubuf as * const _ as usize
                } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ubuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _nbuf as * const _ as usize
                } , 119usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _nbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lb as * const _ as usize }
                , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _blksize as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _blksize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _offset ) ));
}
impl Clone for __sFILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "__stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "__stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "__stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __nitems: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __nitems: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                      arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __prefix: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __offset: off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(__str: *mut ::std::os::raw::c_char, __size: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char,
                   arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__str: *mut ::std::os::raw::c_char, __size: usize,
                     __format: *const ::std::os::raw::c_char,
                     arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__str: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(__linep: *mut *mut ::std::os::raw::c_char,
                    __linecapp: *mut usize,
                    __delimiter: ::std::os::raw::c_int, __stream: *mut FILE)
     -> isize;
}
extern "C" {
    pub fn getline(__linep: *mut *mut ::std::os::raw::c_char,
                   __linecapp: *mut usize, __stream: *mut FILE) -> isize;
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char,
                     arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char,
                 arg3: ::std::os::raw::c_int) -> *mut FILE;
}
extern "C" {
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(arg1: *mut ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int, arg3: usize,
                         arg4: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: usize,
                          arg3: ::std::os::raw::c_int, arg4: usize,
                          arg5: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(arg1: *mut ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int, arg3: usize,
                          arg4: *const ::std::os::raw::c_char,
                          arg5: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: usize,
                           arg3: ::std::os::raw::c_int, arg4: usize,
                           arg5: *const ::std::os::raw::c_char,
                           arg6: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
pub type Int32 = ::std::os::raw::c_int;
pub type UInt32 = ::std::os::raw::c_uint;
pub type Int64 = ::std::os::raw::c_long;
pub type UInt64 = ::std::os::raw::c_ulong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_RetCode {
    TA_SUCCESS = 0,
    TA_LIB_NOT_INITIALIZE = 1,
    TA_BAD_PARAM = 2,
    TA_ALLOC_ERR = 3,
    TA_GROUP_NOT_FOUND = 4,
    TA_FUNC_NOT_FOUND = 5,
    TA_INVALID_HANDLE = 6,
    TA_INVALID_PARAM_HOLDER = 7,
    TA_INVALID_PARAM_HOLDER_TYPE = 8,
    TA_INVALID_PARAM_FUNCTION = 9,
    TA_INPUT_NOT_ALL_INITIALIZE = 10,
    TA_OUTPUT_NOT_ALL_INITIALIZE = 11,
    TA_OUT_OF_RANGE_START_INDEX = 12,
    TA_OUT_OF_RANGE_END_INDEX = 13,
    TA_INVALID_LIST_TYPE = 14,
    TA_BAD_OBJECT = 15,
    TA_NOT_SUPPORTED = 16,
    TA_INTERNAL_ERROR = 5000,
    TA_UNKNOWN_ERR = 65535,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_Compatibility {
    TA_COMPATIBILITY_DEFAULT = 0,
    TA_COMPATIBILITY_METASTOCK = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_MAType {
    TA_MAType_SMA = 0,
    TA_MAType_EMA = 1,
    TA_MAType_WMA = 2,
    TA_MAType_DEMA = 3,
    TA_MAType_TEMA = 4,
    TA_MAType_TRIMA = 5,
    TA_MAType_KAMA = 6,
    TA_MAType_MAMA = 7,
    TA_MAType_T3 = 8,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_FuncUnstId {
    TA_FUNC_UNST_ADX = 0,
    TA_FUNC_UNST_ADXR = 1,
    TA_FUNC_UNST_ATR = 2,
    TA_FUNC_UNST_CMO = 3,
    TA_FUNC_UNST_DX = 4,
    TA_FUNC_UNST_EMA = 5,
    TA_FUNC_UNST_HT_DCPERIOD = 6,
    TA_FUNC_UNST_HT_DCPHASE = 7,
    TA_FUNC_UNST_HT_PHASOR = 8,
    TA_FUNC_UNST_HT_SINE = 9,
    TA_FUNC_UNST_HT_TRENDLINE = 10,
    TA_FUNC_UNST_HT_TRENDMODE = 11,
    TA_FUNC_UNST_KAMA = 12,
    TA_FUNC_UNST_MAMA = 13,
    TA_FUNC_UNST_MFI = 14,
    TA_FUNC_UNST_MINUS_DI = 15,
    TA_FUNC_UNST_MINUS_DM = 16,
    TA_FUNC_UNST_NATR = 17,
    TA_FUNC_UNST_PLUS_DI = 18,
    TA_FUNC_UNST_PLUS_DM = 19,
    TA_FUNC_UNST_RSI = 20,
    TA_FUNC_UNST_STOCHRSI = 21,
    TA_FUNC_UNST_T3 = 22,
    TA_FUNC_UNST_ALL = 23,
    TA_FUNC_UNST_NONE = -1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_RangeType {
    TA_RangeType_RealBody = 0,
    TA_RangeType_HighLow = 1,
    TA_RangeType_Shadows = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_CandleSettingType {
    TA_BodyLong = 0,
    TA_BodyVeryLong = 1,
    TA_BodyShort = 2,
    TA_BodyDoji = 3,
    TA_ShadowLong = 4,
    TA_ShadowVeryLong = 5,
    TA_ShadowShort = 6,
    TA_ShadowVeryShort = 7,
    TA_Near = 8,
    TA_Far = 9,
    TA_Equal = 10,
    TA_AllCandleSettings = 11,
}
extern "C" {
    pub fn TA_GetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionMajor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionMinor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionBuild() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionDate() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionTime() -> *const ::std::os::raw::c_char;
}
pub type TA_Real = f64;
pub type TA_Integer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_StringTable {
    pub size: ::std::os::raw::c_uint,
    pub string: *mut *const ::std::os::raw::c_char,
    pub hiddenData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TA_StringTable() {
    assert_eq!(::std::mem::size_of::<TA_StringTable>() , 24usize , concat ! (
               "Size of: " , stringify ! ( TA_StringTable ) ));
    assert_eq! (::std::mem::align_of::<TA_StringTable>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TA_StringTable ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_StringTable ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_StringTable ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_StringTable ) ) . string as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_StringTable ) , "::"
                , stringify ! ( string ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_StringTable ) ) . hiddenData as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_StringTable ) , "::"
                , stringify ! ( hiddenData ) ));
}
impl Clone for TA_StringTable {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_RetCodeInfo {
    pub enumStr: *const ::std::os::raw::c_char,
    pub infoStr: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_RetCodeInfo() {
    assert_eq!(::std::mem::size_of::<TA_RetCodeInfo>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TA_RetCodeInfo ) ));
    assert_eq! (::std::mem::align_of::<TA_RetCodeInfo>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TA_RetCodeInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RetCodeInfo ) ) . enumStr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RetCodeInfo ) , "::"
                , stringify ! ( enumStr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RetCodeInfo ) ) . infoStr as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RetCodeInfo ) , "::"
                , stringify ! ( infoStr ) ));
}
impl Clone for TA_RetCodeInfo {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TA_SetRetCodeInfo(theRetCode: TA_RetCode,
                             retCodeInfo: *mut TA_RetCodeInfo);
}
extern "C" {
    pub fn TA_Initialize() -> TA_RetCode;
}
extern "C" {
    pub fn TA_Shutdown() -> TA_RetCode;
}
extern "C" {
    pub fn TA_GroupTableAlloc(table: *mut *mut TA_StringTable) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GroupTableFree(table: *mut TA_StringTable) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FuncTableAlloc(group: *const ::std::os::raw::c_char,
                             table: *mut *mut TA_StringTable) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FuncTableFree(table: *mut TA_StringTable) -> TA_RetCode;
}
pub type TA_FuncHandle = ::std::os::raw::c_uint;
extern "C" {
    pub fn TA_GetFuncHandle(name: *const ::std::os::raw::c_char,
                            handle: *mut *const TA_FuncHandle) -> TA_RetCode;
}
pub type TA_FuncFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_FuncInfo {
    pub name: *const ::std::os::raw::c_char,
    pub group: *const ::std::os::raw::c_char,
    pub hint: *const ::std::os::raw::c_char,
    pub camelCaseName: *const ::std::os::raw::c_char,
    pub flags: TA_FuncFlags,
    pub nbInput: ::std::os::raw::c_uint,
    pub nbOptInput: ::std::os::raw::c_uint,
    pub nbOutput: ::std::os::raw::c_uint,
    pub handle: *const TA_FuncHandle,
}
#[test]
fn bindgen_test_layout_TA_FuncInfo() {
    assert_eq!(::std::mem::size_of::<TA_FuncInfo>() , 56usize , concat ! (
               "Size of: " , stringify ! ( TA_FuncInfo ) ));
    assert_eq! (::std::mem::align_of::<TA_FuncInfo>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TA_FuncInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . group as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( group ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . hint as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( hint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . camelCaseName as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( camelCaseName ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . flags as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . nbInput as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( nbInput ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . nbOptInput as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( nbOptInput ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . nbOutput as * const _
                as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( nbOutput ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_FuncInfo ) ) . handle as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_FuncInfo ) , "::" ,
                stringify ! ( handle ) ));
}
impl Clone for TA_FuncInfo {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TA_GetFuncInfo(handle: *const TA_FuncHandle,
                          funcInfo: *mut *const TA_FuncInfo) -> TA_RetCode;
}
pub type TA_CallForEachFunc =
    ::std::option::Option<unsafe extern "C" fn(funcInfo: *const TA_FuncInfo,
                                               opaqueData:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn TA_ForEachFunc(functionToCall: TA_CallForEachFunc,
                          opaqueData: *mut ::std::os::raw::c_void)
     -> TA_RetCode;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_RealRange {
    pub min: TA_Real,
    pub max: TA_Real,
    pub precision: TA_Integer,
    pub suggested_start: TA_Real,
    pub suggested_end: TA_Real,
    pub suggested_increment: TA_Real,
}
#[test]
fn bindgen_test_layout_TA_RealRange() {
    assert_eq!(::std::mem::size_of::<TA_RealRange>() , 48usize , concat ! (
               "Size of: " , stringify ! ( TA_RealRange ) ));
    assert_eq! (::std::mem::align_of::<TA_RealRange>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TA_RealRange ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealRange ) ) . min as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealRange ) , "::" ,
                stringify ! ( min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealRange ) ) . max as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealRange ) , "::" ,
                stringify ! ( max ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealRange ) ) . precision as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealRange ) , "::" ,
                stringify ! ( precision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealRange ) ) . suggested_start as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealRange ) , "::" ,
                stringify ! ( suggested_start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealRange ) ) . suggested_end as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealRange ) , "::" ,
                stringify ! ( suggested_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealRange ) ) . suggested_increment as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealRange ) , "::" ,
                stringify ! ( suggested_increment ) ));
}
impl Clone for TA_RealRange {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_IntegerRange {
    pub min: TA_Integer,
    pub max: TA_Integer,
    pub suggested_start: TA_Integer,
    pub suggested_end: TA_Integer,
    pub suggested_increment: TA_Integer,
}
#[test]
fn bindgen_test_layout_TA_IntegerRange() {
    assert_eq!(::std::mem::size_of::<TA_IntegerRange>() , 20usize , concat ! (
               "Size of: " , stringify ! ( TA_IntegerRange ) ));
    assert_eq! (::std::mem::align_of::<TA_IntegerRange>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( TA_IntegerRange ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerRange ) ) . min as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerRange ) ,
                "::" , stringify ! ( min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerRange ) ) . max as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerRange ) ,
                "::" , stringify ! ( max ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerRange ) ) . suggested_start as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerRange ) ,
                "::" , stringify ! ( suggested_start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerRange ) ) . suggested_end as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerRange ) ,
                "::" , stringify ! ( suggested_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerRange ) ) . suggested_increment
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerRange ) ,
                "::" , stringify ! ( suggested_increment ) ));
}
impl Clone for TA_IntegerRange {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_RealDataPair {
    pub value: TA_Real,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_RealDataPair() {
    assert_eq!(::std::mem::size_of::<TA_RealDataPair>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TA_RealDataPair ) ));
    assert_eq! (::std::mem::align_of::<TA_RealDataPair>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( TA_RealDataPair ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealDataPair ) ) . value as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealDataPair ) ,
                "::" , stringify ! ( value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealDataPair ) ) . string as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealDataPair ) ,
                "::" , stringify ! ( string ) ));
}
impl Clone for TA_RealDataPair {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_IntegerDataPair {
    pub value: TA_Integer,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_IntegerDataPair() {
    assert_eq!(::std::mem::size_of::<TA_IntegerDataPair>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( TA_IntegerDataPair ) ));
    assert_eq! (::std::mem::align_of::<TA_IntegerDataPair>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( TA_IntegerDataPair ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerDataPair ) ) . value as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerDataPair ) ,
                "::" , stringify ! ( value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerDataPair ) ) . string as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerDataPair ) ,
                "::" , stringify ! ( string ) ));
}
impl Clone for TA_IntegerDataPair {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_RealList {
    pub data: *const TA_RealDataPair,
    pub nbElement: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_TA_RealList() {
    assert_eq!(::std::mem::size_of::<TA_RealList>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TA_RealList ) ));
    assert_eq! (::std::mem::align_of::<TA_RealList>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TA_RealList ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealList ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealList ) , "::" ,
                stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_RealList ) ) . nbElement as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_RealList ) , "::" ,
                stringify ! ( nbElement ) ));
}
impl Clone for TA_RealList {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_IntegerList {
    pub data: *const TA_IntegerDataPair,
    pub nbElement: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_TA_IntegerList() {
    assert_eq!(::std::mem::size_of::<TA_IntegerList>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TA_IntegerList ) ));
    assert_eq! (::std::mem::align_of::<TA_IntegerList>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TA_IntegerList ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerList ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerList ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_IntegerList ) ) . nbElement as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_IntegerList ) , "::"
                , stringify ! ( nbElement ) ));
}
impl Clone for TA_IntegerList {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_InputParameterType {
    TA_Input_Price = 0,
    TA_Input_Real = 1,
    TA_Input_Integer = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_OptInputParameterType {
    TA_OptInput_RealRange = 0,
    TA_OptInput_RealList = 1,
    TA_OptInput_IntegerRange = 2,
    TA_OptInput_IntegerList = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TA_OutputParameterType { TA_Output_Real = 0, TA_Output_Integer = 1, }
pub type TA_InputFlags = ::std::os::raw::c_int;
pub type TA_OptInputFlags = ::std::os::raw::c_int;
pub type TA_OutputFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_InputParameterInfo {
    pub type_: TA_InputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_InputFlags,
}
#[test]
fn bindgen_test_layout_TA_InputParameterInfo() {
    assert_eq!(::std::mem::size_of::<TA_InputParameterInfo>() , 24usize ,
               concat ! ( "Size of: " , stringify ! ( TA_InputParameterInfo )
               ));
    assert_eq! (::std::mem::align_of::<TA_InputParameterInfo>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( TA_InputParameterInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_InputParameterInfo ) ) . type_ as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_InputParameterInfo )
                , "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_InputParameterInfo ) ) . paramName as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_InputParameterInfo )
                , "::" , stringify ! ( paramName ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_InputParameterInfo ) ) . flags as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_InputParameterInfo )
                , "::" , stringify ! ( flags ) ));
}
impl Clone for TA_InputParameterInfo {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_OptInputParameterInfo {
    pub type_: TA_OptInputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_OptInputFlags,
    pub displayName: *const ::std::os::raw::c_char,
    pub dataSet: *const ::std::os::raw::c_void,
    pub defaultValue: TA_Real,
    pub hint: *const ::std::os::raw::c_char,
    pub helpFile: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_OptInputParameterInfo() {
    assert_eq!(::std::mem::size_of::<TA_OptInputParameterInfo>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( TA_OptInputParameterInfo ) ));
    assert_eq! (::std::mem::align_of::<TA_OptInputParameterInfo>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( TA_OptInputParameterInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) . type_ as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) . paramName
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( paramName )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) . flags as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) .
                displayName as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( displayName
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) . dataSet as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( dataSet )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) .
                defaultValue as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( defaultValue
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) . hint as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( hint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OptInputParameterInfo ) ) . helpFile
                as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                TA_OptInputParameterInfo ) , "::" , stringify ! ( helpFile )
                ));
}
impl Clone for TA_OptInputParameterInfo {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_OutputParameterInfo {
    pub type_: TA_OutputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_OutputFlags,
}
#[test]
fn bindgen_test_layout_TA_OutputParameterInfo() {
    assert_eq!(::std::mem::size_of::<TA_OutputParameterInfo>() , 24usize ,
               concat ! ( "Size of: " , stringify ! ( TA_OutputParameterInfo )
               ));
    assert_eq! (::std::mem::align_of::<TA_OutputParameterInfo>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( TA_OutputParameterInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OutputParameterInfo ) ) . type_ as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_OutputParameterInfo
                ) , "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OutputParameterInfo ) ) . paramName as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_OutputParameterInfo
                ) , "::" , stringify ! ( paramName ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_OutputParameterInfo ) ) . flags as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_OutputParameterInfo
                ) , "::" , stringify ! ( flags ) ));
}
impl Clone for TA_OutputParameterInfo {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TA_GetInputParameterInfo(handle: *const TA_FuncHandle,
                                    paramIndex: ::std::os::raw::c_uint,
                                    info: *mut *const TA_InputParameterInfo)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetOptInputParameterInfo(handle: *const TA_FuncHandle,
                                       paramIndex: ::std::os::raw::c_uint,
                                       info:
                                           *mut *const TA_OptInputParameterInfo)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetOutputParameterInfo(handle: *const TA_FuncHandle,
                                     paramIndex: ::std::os::raw::c_uint,
                                     info: *mut *const TA_OutputParameterInfo)
     -> TA_RetCode;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TA_ParamHolder {
    pub hiddenData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TA_ParamHolder() {
    assert_eq!(::std::mem::size_of::<TA_ParamHolder>() , 8usize , concat ! (
               "Size of: " , stringify ! ( TA_ParamHolder ) ));
    assert_eq! (::std::mem::align_of::<TA_ParamHolder>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TA_ParamHolder ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TA_ParamHolder ) ) . hiddenData as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TA_ParamHolder ) , "::"
                , stringify ! ( hiddenData ) ));
}
impl Clone for TA_ParamHolder {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TA_ParamHolderAlloc(handle: *const TA_FuncHandle,
                               allocatedParams: *mut *mut TA_ParamHolder)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_ParamHolderFree(params: *mut TA_ParamHolder) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamIntegerPtr(params: *mut TA_ParamHolder,
                                      paramIndex: ::std::os::raw::c_uint,
                                      value: *const TA_Integer) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamRealPtr(params: *mut TA_ParamHolder,
                                   paramIndex: ::std::os::raw::c_uint,
                                   value: *const TA_Real) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamPricePtr(params: *mut TA_ParamHolder,
                                    paramIndex: ::std::os::raw::c_uint,
                                    open: *const TA_Real,
                                    high: *const TA_Real, low: *const TA_Real,
                                    close: *const TA_Real,
                                    volume: *const TA_Real,
                                    openInterest: *const TA_Real)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOptInputParamInteger(params: *mut TA_ParamHolder,
                                      paramIndex: ::std::os::raw::c_uint,
                                      optInValue: TA_Integer) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOptInputParamReal(params: *mut TA_ParamHolder,
                                   paramIndex: ::std::os::raw::c_uint,
                                   optInValue: TA_Real) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOutputParamIntegerPtr(params: *mut TA_ParamHolder,
                                       paramIndex: ::std::os::raw::c_uint,
                                       out: *mut TA_Integer) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOutputParamRealPtr(params: *mut TA_ParamHolder,
                                    paramIndex: ::std::os::raw::c_uint,
                                    out: *mut TA_Real) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetLookback(params: *const TA_ParamHolder,
                          lookback: *mut TA_Integer) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CallFunc(params: *const TA_ParamHolder, startIdx: TA_Integer,
                       endIdx: TA_Integer, outBegIdx: *mut TA_Integer,
                       outNbElement: *mut TA_Integer) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FunctionDescriptionXML() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_ACOS(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ACOS(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ACOS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AD(startIdx: ::std::os::raw::c_int,
                 endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                 inLow: *const f64, inClose: *const f64, inVolume: *const f64,
                 outBegIdx: *mut ::std::os::raw::c_int,
                 outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AD(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                   inLow: *const f32, inClose: *const f32,
                   inVolume: *const f32,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADD(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal0: *const f64,
                  inReal1: *const f64, outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADD(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal0: *const f32,
                    inReal1: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADOSC(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                    inLow: *const f64, inClose: *const f64,
                    inVolume: *const f64,
                    optInFastPeriod: ::std::os::raw::c_int,
                    optInSlowPeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADOSC(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                      inLow: *const f32, inClose: *const f32,
                      inVolume: *const f32,
                      optInFastPeriod: ::std::os::raw::c_int,
                      optInSlowPeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADOSC_Lookback(optInFastPeriod: ::std::os::raw::c_int,
                             optInSlowPeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADX(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                  inLow: *const f64, inClose: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADX(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                    inLow: *const f32, inClose: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADXR(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                   inLow: *const f64, inClose: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADXR(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                     inLow: *const f32, inClose: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADXR_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_APO(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInFastPeriod: ::std::os::raw::c_int,
                  optInSlowPeriod: ::std::os::raw::c_int,
                  optInMAType: TA_MAType,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_APO(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInFastPeriod: ::std::os::raw::c_int,
                    optInSlowPeriod: ::std::os::raw::c_int,
                    optInMAType: TA_MAType,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_APO_Lookback(optInFastPeriod: ::std::os::raw::c_int,
                           optInSlowPeriod: ::std::os::raw::c_int,
                           optInMAType: TA_MAType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AROON(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                    inLow: *const f64, optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outAroonDown: *mut f64, outAroonUp: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AROON(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                      inLow: *const f32,
                      optInTimePeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outAroonDown: *mut f64, outAroonUp: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_AROON_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AROONOSC(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                       inLow: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AROONOSC(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                         inLow: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AROONOSC_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ASIN(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ASIN(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ASIN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ATAN(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ATAN(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ATAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ATR(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                  inLow: *const f64, inClose: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ATR(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                    inLow: *const f32, inClose: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ATR_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AVGPRICE(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                       inHigh: *const f64, inLow: *const f64,
                       inClose: *const f64,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AVGPRICE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                         inHigh: *const f32, inLow: *const f32,
                         inClose: *const f32,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AVGPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BBANDS(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f64,
                     optInTimePeriod: ::std::os::raw::c_int,
                     optInNbDevUp: f64, optInNbDevDn: f64,
                     optInMAType: TA_MAType,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outRealUpperBand: *mut f64, outRealMiddleBand: *mut f64,
                     outRealLowerBand: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BBANDS(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal: *const f32,
                       optInTimePeriod: ::std::os::raw::c_int,
                       optInNbDevUp: f64, optInNbDevDn: f64,
                       optInMAType: TA_MAType,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outRealUpperBand: *mut f64,
                       outRealMiddleBand: *mut f64,
                       outRealLowerBand: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BBANDS_Lookback(optInTimePeriod: ::std::os::raw::c_int,
                              optInNbDevUp: f64, optInNbDevDn: f64,
                              optInMAType: TA_MAType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BETA(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal0: *const f64,
                   inReal1: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BETA(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal0: *const f32,
                     inReal1: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BETA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BOP(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                  inHigh: *const f64, inLow: *const f64, inClose: *const f64,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BOP(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                    inHigh: *const f32, inLow: *const f32,
                    inClose: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BOP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CCI(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                  inLow: *const f64, inClose: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CCI(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                    inLow: *const f32, inClose: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CCI_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL2CROWS(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                        inHigh: *const f64, inLow: *const f64,
                        inClose: *const f64,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL2CROWS(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                          inHigh: *const f32, inLow: *const f32,
                          inClose: *const f32,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL2CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3BLACKCROWS(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3BLACKCROWS(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3BLACKCROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3INSIDE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                         inHigh: *const f64, inLow: *const f64,
                         inClose: *const f64,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3INSIDE(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                           inHigh: *const f32, inLow: *const f32,
                           inClose: *const f32,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3INSIDE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3LINESTRIKE(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3LINESTRIKE(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3LINESTRIKE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3OUTSIDE(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                          inHigh: *const f64, inLow: *const f64,
                          inClose: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3OUTSIDE(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                            inHigh: *const f32, inLow: *const f32,
                            inClose: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3OUTSIDE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3STARSINSOUTH(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f64, inHigh: *const f64,
                               inLow: *const f64, inClose: *const f64,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3STARSINSOUTH(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f32, inHigh: *const f32,
                                 inLow: *const f32, inClose: *const f32,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3STARSINSOUTH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3WHITESOLDIERS(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f64, inHigh: *const f64,
                                inLow: *const f64, inClose: *const f64,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3WHITESOLDIERS(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f32, inHigh: *const f32,
                                  inLow: *const f32, inClose: *const f32,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3WHITESOLDIERS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLABANDONEDBABY(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f64, inHigh: *const f64,
                               inLow: *const f64, inClose: *const f64,
                               optInPenetration: f64,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLABANDONEDBABY(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f32, inHigh: *const f32,
                                 inLow: *const f32, inClose: *const f32,
                                 optInPenetration: f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLABANDONEDBABY_Lookback(optInPenetration: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLADVANCEBLOCK(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inOpen: *const f64, inHigh: *const f64,
                              inLow: *const f64, inClose: *const f64,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLADVANCEBLOCK(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f32, inHigh: *const f32,
                                inLow: *const f32, inClose: *const f32,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLADVANCEBLOCK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLBELTHOLD(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                          inHigh: *const f64, inLow: *const f64,
                          inClose: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLBELTHOLD(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                            inHigh: *const f32, inLow: *const f32,
                            inClose: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLBELTHOLD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLBREAKAWAY(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                           inHigh: *const f64, inLow: *const f64,
                           inClose: *const f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLBREAKAWAY(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f32, inHigh: *const f32,
                             inLow: *const f32, inClose: *const f32,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLBREAKAWAY_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCLOSINGMARUBOZU(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f64, inHigh: *const f64,
                                 inLow: *const f64, inClose: *const f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCLOSINGMARUBOZU(startIdx: ::std::os::raw::c_int,
                                   endIdx: ::std::os::raw::c_int,
                                   inOpen: *const f32, inHigh: *const f32,
                                   inLow: *const f32, inClose: *const f32,
                                   outBegIdx: *mut ::std::os::raw::c_int,
                                   outNBElement: *mut ::std::os::raw::c_int,
                                   outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCLOSINGMARUBOZU_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCONCEALBABYSWALL(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f64, inHigh: *const f64,
                                  inLow: *const f64, inClose: *const f64,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCONCEALBABYSWALL(startIdx: ::std::os::raw::c_int,
                                    endIdx: ::std::os::raw::c_int,
                                    inOpen: *const f32, inHigh: *const f32,
                                    inLow: *const f32, inClose: *const f32,
                                    outBegIdx: *mut ::std::os::raw::c_int,
                                    outNBElement: *mut ::std::os::raw::c_int,
                                    outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCONCEALBABYSWALL_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCOUNTERATTACK(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f64, inHigh: *const f64,
                               inLow: *const f64, inClose: *const f64,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCOUNTERATTACK(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f32, inHigh: *const f32,
                                 inLow: *const f32, inClose: *const f32,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCOUNTERATTACK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDARKCLOUDCOVER(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f64, inHigh: *const f64,
                                inLow: *const f64, inClose: *const f64,
                                optInPenetration: f64,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDARKCLOUDCOVER(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f32, inHigh: *const f32,
                                  inLow: *const f32, inClose: *const f32,
                                  optInPenetration: f64,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDARKCLOUDCOVER_Lookback(optInPenetration: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDOJI(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                      inHigh: *const f64, inLow: *const f64,
                      inClose: *const f64,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDOJI(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                        inHigh: *const f32, inLow: *const f32,
                        inClose: *const f32,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDOJISTAR(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                          inHigh: *const f64, inLow: *const f64,
                          inClose: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDOJISTAR(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                            inHigh: *const f32, inLow: *const f32,
                            inClose: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDOJISTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDRAGONFLYDOJI(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f64, inHigh: *const f64,
                               inLow: *const f64, inClose: *const f64,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDRAGONFLYDOJI(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f32, inHigh: *const f32,
                                 inLow: *const f32, inClose: *const f32,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDRAGONFLYDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLENGULFING(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                           inHigh: *const f64, inLow: *const f64,
                           inClose: *const f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLENGULFING(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f32, inHigh: *const f32,
                             inLow: *const f32, inClose: *const f32,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLENGULFING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLEVENINGDOJISTAR(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f64, inHigh: *const f64,
                                 inLow: *const f64, inClose: *const f64,
                                 optInPenetration: f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLEVENINGDOJISTAR(startIdx: ::std::os::raw::c_int,
                                   endIdx: ::std::os::raw::c_int,
                                   inOpen: *const f32, inHigh: *const f32,
                                   inLow: *const f32, inClose: *const f32,
                                   optInPenetration: f64,
                                   outBegIdx: *mut ::std::os::raw::c_int,
                                   outNBElement: *mut ::std::os::raw::c_int,
                                   outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLEVENINGDOJISTAR_Lookback(optInPenetration: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLEVENINGSTAR(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             optInPenetration: f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLEVENINGSTAR(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               optInPenetration: f64,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLEVENINGSTAR_Lookback(optInPenetration: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLGAPSIDESIDEWHITE(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f64, inHigh: *const f64,
                                  inLow: *const f64, inClose: *const f64,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLGAPSIDESIDEWHITE(startIdx: ::std::os::raw::c_int,
                                    endIdx: ::std::os::raw::c_int,
                                    inOpen: *const f32, inHigh: *const f32,
                                    inLow: *const f32, inClose: *const f32,
                                    outBegIdx: *mut ::std::os::raw::c_int,
                                    outNBElement: *mut ::std::os::raw::c_int,
                                    outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLGAPSIDESIDEWHITE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLGRAVESTONEDOJI(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f64, inHigh: *const f64,
                                inLow: *const f64, inClose: *const f64,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLGRAVESTONEDOJI(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f32, inHigh: *const f32,
                                  inLow: *const f32, inClose: *const f32,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLGRAVESTONEDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHAMMER(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                        inHigh: *const f64, inLow: *const f64,
                        inClose: *const f64,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHAMMER(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                          inHigh: *const f32, inLow: *const f32,
                          inClose: *const f32,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHAMMER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHANGINGMAN(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                            inHigh: *const f64, inLow: *const f64,
                            inClose: *const f64,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHANGINGMAN(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inOpen: *const f32, inHigh: *const f32,
                              inLow: *const f32, inClose: *const f32,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHANGINGMAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHARAMI(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                        inHigh: *const f64, inLow: *const f64,
                        inClose: *const f64,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHARAMI(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                          inHigh: *const f32, inLow: *const f32,
                          inClose: *const f32,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHARAMI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHARAMICROSS(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHARAMICROSS(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHARAMICROSS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIGHWAVE(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                          inHigh: *const f64, inLow: *const f64,
                          inClose: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIGHWAVE(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                            inHigh: *const f32, inLow: *const f32,
                            inClose: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIGHWAVE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIKKAKE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                         inHigh: *const f64, inLow: *const f64,
                         inClose: *const f64,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIKKAKE(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                           inHigh: *const f32, inLow: *const f32,
                           inClose: *const f32,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIKKAKE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIKKAKEMOD(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                            inHigh: *const f64, inLow: *const f64,
                            inClose: *const f64,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIKKAKEMOD(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inOpen: *const f32, inHigh: *const f32,
                              inLow: *const f32, inClose: *const f32,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIKKAKEMOD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHOMINGPIGEON(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inOpen: *const f64, inHigh: *const f64,
                              inLow: *const f64, inClose: *const f64,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHOMINGPIGEON(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f32, inHigh: *const f32,
                                inLow: *const f32, inClose: *const f32,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHOMINGPIGEON_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLIDENTICAL3CROWS(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f64, inHigh: *const f64,
                                 inLow: *const f64, inClose: *const f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLIDENTICAL3CROWS(startIdx: ::std::os::raw::c_int,
                                   endIdx: ::std::os::raw::c_int,
                                   inOpen: *const f32, inHigh: *const f32,
                                   inLow: *const f32, inClose: *const f32,
                                   outBegIdx: *mut ::std::os::raw::c_int,
                                   outNBElement: *mut ::std::os::raw::c_int,
                                   outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLIDENTICAL3CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLINNECK(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                        inHigh: *const f64, inLow: *const f64,
                        inClose: *const f64,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLINNECK(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                          inHigh: *const f32, inLow: *const f32,
                          inClose: *const f32,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLINNECK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLINVERTEDHAMMER(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f64, inHigh: *const f64,
                                inLow: *const f64, inClose: *const f64,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLINVERTEDHAMMER(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f32, inHigh: *const f32,
                                  inLow: *const f32, inClose: *const f32,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLINVERTEDHAMMER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLKICKING(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                         inHigh: *const f64, inLow: *const f64,
                         inClose: *const f64,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLKICKING(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                           inHigh: *const f32, inLow: *const f32,
                           inClose: *const f32,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLKICKING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLKICKINGBYLENGTH(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f64, inHigh: *const f64,
                                 inLow: *const f64, inClose: *const f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLKICKINGBYLENGTH(startIdx: ::std::os::raw::c_int,
                                   endIdx: ::std::os::raw::c_int,
                                   inOpen: *const f32, inHigh: *const f32,
                                   inLow: *const f32, inClose: *const f32,
                                   outBegIdx: *mut ::std::os::raw::c_int,
                                   outNBElement: *mut ::std::os::raw::c_int,
                                   outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLKICKINGBYLENGTH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLADDERBOTTOM(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inOpen: *const f64, inHigh: *const f64,
                              inLow: *const f64, inClose: *const f64,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLADDERBOTTOM(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f32, inHigh: *const f32,
                                inLow: *const f32, inClose: *const f32,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLADDERBOTTOM_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLONGLEGGEDDOJI(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f64, inHigh: *const f64,
                                inLow: *const f64, inClose: *const f64,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLONGLEGGEDDOJI(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f32, inHigh: *const f32,
                                  inLow: *const f32, inClose: *const f32,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLONGLEGGEDDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLONGLINE(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                          inHigh: *const f64, inLow: *const f64,
                          inClose: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLONGLINE(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                            inHigh: *const f32, inLow: *const f32,
                            inClose: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLONGLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMARUBOZU(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                          inHigh: *const f64, inLow: *const f64,
                          inClose: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMARUBOZU(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                            inHigh: *const f32, inLow: *const f32,
                            inClose: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMARUBOZU_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMATCHINGLOW(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMATCHINGLOW(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMATCHINGLOW_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMATHOLD(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                         inHigh: *const f64, inLow: *const f64,
                         inClose: *const f64, optInPenetration: f64,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMATHOLD(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                           inHigh: *const f32, inLow: *const f32,
                           inClose: *const f32, optInPenetration: f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMATHOLD_Lookback(optInPenetration: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMORNINGDOJISTAR(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f64, inHigh: *const f64,
                                 inLow: *const f64, inClose: *const f64,
                                 optInPenetration: f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMORNINGDOJISTAR(startIdx: ::std::os::raw::c_int,
                                   endIdx: ::std::os::raw::c_int,
                                   inOpen: *const f32, inHigh: *const f32,
                                   inLow: *const f32, inClose: *const f32,
                                   optInPenetration: f64,
                                   outBegIdx: *mut ::std::os::raw::c_int,
                                   outNBElement: *mut ::std::os::raw::c_int,
                                   outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMORNINGDOJISTAR_Lookback(optInPenetration: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMORNINGSTAR(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             optInPenetration: f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMORNINGSTAR(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               optInPenetration: f64,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMORNINGSTAR_Lookback(optInPenetration: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLONNECK(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                        inHigh: *const f64, inLow: *const f64,
                        inClose: *const f64,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLONNECK(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                          inHigh: *const f32, inLow: *const f32,
                          inClose: *const f32,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLONNECK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLPIERCING(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                          inHigh: *const f64, inLow: *const f64,
                          inClose: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLPIERCING(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                            inHigh: *const f32, inLow: *const f32,
                            inClose: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLPIERCING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLRICKSHAWMAN(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLRICKSHAWMAN(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLRICKSHAWMAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLRISEFALL3METHODS(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f64, inHigh: *const f64,
                                  inLow: *const f64, inClose: *const f64,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLRISEFALL3METHODS(startIdx: ::std::os::raw::c_int,
                                    endIdx: ::std::os::raw::c_int,
                                    inOpen: *const f32, inHigh: *const f32,
                                    inLow: *const f32, inClose: *const f32,
                                    outBegIdx: *mut ::std::os::raw::c_int,
                                    outNBElement: *mut ::std::os::raw::c_int,
                                    outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLRISEFALL3METHODS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSEPARATINGLINES(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f64, inHigh: *const f64,
                                 inLow: *const f64, inClose: *const f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSEPARATINGLINES(startIdx: ::std::os::raw::c_int,
                                   endIdx: ::std::os::raw::c_int,
                                   inOpen: *const f32, inHigh: *const f32,
                                   inLow: *const f32, inClose: *const f32,
                                   outBegIdx: *mut ::std::os::raw::c_int,
                                   outNBElement: *mut ::std::os::raw::c_int,
                                   outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSEPARATINGLINES_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSHOOTINGSTAR(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inOpen: *const f64, inHigh: *const f64,
                              inLow: *const f64, inClose: *const f64,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSHOOTINGSTAR(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f32, inHigh: *const f32,
                                inLow: *const f32, inClose: *const f32,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSHOOTINGSTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSHORTLINE(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                           inHigh: *const f64, inLow: *const f64,
                           inClose: *const f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSHORTLINE(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f32, inHigh: *const f32,
                             inLow: *const f32, inClose: *const f32,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSHORTLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSPINNINGTOP(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f64, inHigh: *const f64,
                             inLow: *const f64, inClose: *const f64,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSPINNINGTOP(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f32, inHigh: *const f32,
                               inLow: *const f32, inClose: *const f32,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSPINNINGTOP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSTALLEDPATTERN(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f64, inHigh: *const f64,
                                inLow: *const f64, inClose: *const f64,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSTALLEDPATTERN(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f32, inHigh: *const f32,
                                  inLow: *const f32, inClose: *const f32,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSTALLEDPATTERN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSTICKSANDWICH(startIdx: ::std::os::raw::c_int,
                               endIdx: ::std::os::raw::c_int,
                               inOpen: *const f64, inHigh: *const f64,
                               inLow: *const f64, inClose: *const f64,
                               outBegIdx: *mut ::std::os::raw::c_int,
                               outNBElement: *mut ::std::os::raw::c_int,
                               outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSTICKSANDWICH(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f32, inHigh: *const f32,
                                 inLow: *const f32, inClose: *const f32,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSTICKSANDWICH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTAKURI(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                        inHigh: *const f64, inLow: *const f64,
                        inClose: *const f64,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTAKURI(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                          inHigh: *const f32, inLow: *const f32,
                          inClose: *const f32,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTAKURI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTASUKIGAP(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                           inHigh: *const f64, inLow: *const f64,
                           inClose: *const f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTASUKIGAP(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f32, inHigh: *const f32,
                             inLow: *const f32, inClose: *const f32,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTASUKIGAP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTHRUSTING(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                           inHigh: *const f64, inLow: *const f64,
                           inClose: *const f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTHRUSTING(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inOpen: *const f32, inHigh: *const f32,
                             inLow: *const f32, inClose: *const f32,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTHRUSTING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTRISTAR(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inOpen: *const f64,
                         inHigh: *const f64, inLow: *const f64,
                         inClose: *const f64,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTRISTAR(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inOpen: *const f32,
                           inHigh: *const f32, inLow: *const f32,
                           inClose: *const f32,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTRISTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLUNIQUE3RIVER(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inOpen: *const f64, inHigh: *const f64,
                              inLow: *const f64, inClose: *const f64,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLUNIQUE3RIVER(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inOpen: *const f32, inHigh: *const f32,
                                inLow: *const f32, inClose: *const f32,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLUNIQUE3RIVER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLUPSIDEGAP2CROWS(startIdx: ::std::os::raw::c_int,
                                 endIdx: ::std::os::raw::c_int,
                                 inOpen: *const f64, inHigh: *const f64,
                                 inLow: *const f64, inClose: *const f64,
                                 outBegIdx: *mut ::std::os::raw::c_int,
                                 outNBElement: *mut ::std::os::raw::c_int,
                                 outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLUPSIDEGAP2CROWS(startIdx: ::std::os::raw::c_int,
                                   endIdx: ::std::os::raw::c_int,
                                   inOpen: *const f32, inHigh: *const f32,
                                   inLow: *const f32, inClose: *const f32,
                                   outBegIdx: *mut ::std::os::raw::c_int,
                                   outNBElement: *mut ::std::os::raw::c_int,
                                   outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLUPSIDEGAP2CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLXSIDEGAP3METHODS(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inOpen: *const f64, inHigh: *const f64,
                                  inLow: *const f64, inClose: *const f64,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLXSIDEGAP3METHODS(startIdx: ::std::os::raw::c_int,
                                    endIdx: ::std::os::raw::c_int,
                                    inOpen: *const f32, inHigh: *const f32,
                                    inLow: *const f32, inClose: *const f32,
                                    outBegIdx: *mut ::std::os::raw::c_int,
                                    outNBElement: *mut ::std::os::raw::c_int,
                                    outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLXSIDEGAP3METHODS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CEIL(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CEIL(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CEIL_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CMO(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CMO(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CMO_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CORREL(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal0: *const f64,
                     inReal1: *const f64,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CORREL(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal0: *const f32,
                       inReal1: *const f32,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CORREL_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_COS(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_COS(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_COS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_COSH(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_COSH(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_COSH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DEMA(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DEMA(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DEMA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DIV(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal0: *const f64,
                  inReal1: *const f64, outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DIV(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal0: *const f32,
                    inReal1: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DIV_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DX(startIdx: ::std::os::raw::c_int,
                 endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                 inLow: *const f64, inClose: *const f64,
                 optInTimePeriod: ::std::os::raw::c_int,
                 outBegIdx: *mut ::std::os::raw::c_int,
                 outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DX(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                   inLow: *const f32, inClose: *const f32,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_EMA(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_EMA(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_EMA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_EXP(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_EXP(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_EXP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_FLOOR(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f64,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_FLOOR(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inReal: *const f32,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FLOOR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_DCPERIOD(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inReal: *const f64,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_DCPERIOD(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inReal: *const f32,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_DCPERIOD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_DCPHASE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inReal: *const f64,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_DCPHASE(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inReal: *const f32,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_DCPHASE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_PHASOR(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inReal: *const f64,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outInPhase: *mut f64, outQuadrature: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_PHASOR(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inReal: *const f32,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outInPhase: *mut f64, outQuadrature: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_PHASOR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_SINE(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inReal: *const f64,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outSine: *mut f64, outLeadSine: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_SINE(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inReal: *const f32,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outSine: *mut f64, outLeadSine: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_SINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_TRENDLINE(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inReal: *const f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_TRENDLINE(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inReal: *const f32,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_TRENDLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_TRENDMODE(startIdx: ::std::os::raw::c_int,
                           endIdx: ::std::os::raw::c_int, inReal: *const f64,
                           outBegIdx: *mut ::std::os::raw::c_int,
                           outNBElement: *mut ::std::os::raw::c_int,
                           outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_TRENDMODE(startIdx: ::std::os::raw::c_int,
                             endIdx: ::std::os::raw::c_int,
                             inReal: *const f32,
                             outBegIdx: *mut ::std::os::raw::c_int,
                             outNBElement: *mut ::std::os::raw::c_int,
                             outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_TRENDMODE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_KAMA(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_KAMA(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_KAMA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inReal: *const f64,
                        optInTimePeriod: ::std::os::raw::c_int,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inReal: *const f32,
                          optInTimePeriod: ::std::os::raw::c_int,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_ANGLE(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inReal: *const f64,
                              optInTimePeriod: ::std::os::raw::c_int,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_ANGLE(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inReal: *const f32,
                                optInTimePeriod: ::std::os::raw::c_int,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_ANGLE_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_INTERCEPT(startIdx: ::std::os::raw::c_int,
                                  endIdx: ::std::os::raw::c_int,
                                  inReal: *const f64,
                                  optInTimePeriod: ::std::os::raw::c_int,
                                  outBegIdx: *mut ::std::os::raw::c_int,
                                  outNBElement: *mut ::std::os::raw::c_int,
                                  outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_INTERCEPT(startIdx: ::std::os::raw::c_int,
                                    endIdx: ::std::os::raw::c_int,
                                    inReal: *const f32,
                                    optInTimePeriod: ::std::os::raw::c_int,
                                    outBegIdx: *mut ::std::os::raw::c_int,
                                    outNBElement: *mut ::std::os::raw::c_int,
                                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_INTERCEPT_Lookback(optInTimePeriod:
                                               ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_SLOPE(startIdx: ::std::os::raw::c_int,
                              endIdx: ::std::os::raw::c_int,
                              inReal: *const f64,
                              optInTimePeriod: ::std::os::raw::c_int,
                              outBegIdx: *mut ::std::os::raw::c_int,
                              outNBElement: *mut ::std::os::raw::c_int,
                              outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_SLOPE(startIdx: ::std::os::raw::c_int,
                                endIdx: ::std::os::raw::c_int,
                                inReal: *const f32,
                                optInTimePeriod: ::std::os::raw::c_int,
                                outBegIdx: *mut ::std::os::raw::c_int,
                                outNBElement: *mut ::std::os::raw::c_int,
                                outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_SLOPE_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LN(startIdx: ::std::os::raw::c_int,
                 endIdx: ::std::os::raw::c_int, inReal: *const f64,
                 outBegIdx: *mut ::std::os::raw::c_int,
                 outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LN(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f32,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LOG10(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f64,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LOG10(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inReal: *const f32,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LOG10_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MA(startIdx: ::std::os::raw::c_int,
                 endIdx: ::std::os::raw::c_int, inReal: *const f64,
                 optInTimePeriod: ::std::os::raw::c_int,
                 optInMAType: TA_MAType,
                 outBegIdx: *mut ::std::os::raw::c_int,
                 outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MA(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f32,
                   optInTimePeriod: ::std::os::raw::c_int,
                   optInMAType: TA_MAType,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MA_Lookback(optInTimePeriod: ::std::os::raw::c_int,
                          optInMAType: TA_MAType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACD(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInFastPeriod: ::std::os::raw::c_int,
                   optInSlowPeriod: ::std::os::raw::c_int,
                   optInSignalPeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outMACD: *mut f64, outMACDSignal: *mut f64,
                   outMACDHist: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACD(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInFastPeriod: ::std::os::raw::c_int,
                     optInSlowPeriod: ::std::os::raw::c_int,
                     optInSignalPeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outMACD: *mut f64, outMACDSignal: *mut f64,
                     outMACDHist: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACD_Lookback(optInFastPeriod: ::std::os::raw::c_int,
                            optInSlowPeriod: ::std::os::raw::c_int,
                            optInSignalPeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACDEXT(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inReal: *const f64,
                      optInFastPeriod: ::std::os::raw::c_int,
                      optInFastMAType: TA_MAType,
                      optInSlowPeriod: ::std::os::raw::c_int,
                      optInSlowMAType: TA_MAType,
                      optInSignalPeriod: ::std::os::raw::c_int,
                      optInSignalMAType: TA_MAType,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outMACD: *mut f64, outMACDSignal: *mut f64,
                      outMACDHist: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACDEXT(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inReal: *const f32,
                        optInFastPeriod: ::std::os::raw::c_int,
                        optInFastMAType: TA_MAType,
                        optInSlowPeriod: ::std::os::raw::c_int,
                        optInSlowMAType: TA_MAType,
                        optInSignalPeriod: ::std::os::raw::c_int,
                        optInSignalMAType: TA_MAType,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outMACD: *mut f64, outMACDSignal: *mut f64,
                        outMACDHist: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACDEXT_Lookback(optInFastPeriod: ::std::os::raw::c_int,
                               optInFastMAType: TA_MAType,
                               optInSlowPeriod: ::std::os::raw::c_int,
                               optInSlowMAType: TA_MAType,
                               optInSignalPeriod: ::std::os::raw::c_int,
                               optInSignalMAType: TA_MAType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACDFIX(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inReal: *const f64,
                      optInSignalPeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outMACD: *mut f64, outMACDSignal: *mut f64,
                      outMACDHist: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACDFIX(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inReal: *const f32,
                        optInSignalPeriod: ::std::os::raw::c_int,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outMACD: *mut f64, outMACDSignal: *mut f64,
                        outMACDHist: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACDFIX_Lookback(optInSignalPeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAMA(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInFastLimit: f64, optInSlowLimit: f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outMAMA: *mut f64, outFAMA: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAMA(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInFastLimit: f64, optInSlowLimit: f64,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outMAMA: *mut f64, outFAMA: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAMA_Lookback(optInFastLimit: f64, optInSlowLimit: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAVP(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   inPeriods: *const f64,
                   optInMinPeriod: ::std::os::raw::c_int,
                   optInMaxPeriod: ::std::os::raw::c_int,
                   optInMAType: TA_MAType,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAVP(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     inPeriods: *const f32,
                     optInMinPeriod: ::std::os::raw::c_int,
                     optInMaxPeriod: ::std::os::raw::c_int,
                     optInMAType: TA_MAType,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAVP_Lookback(optInMinPeriod: ::std::os::raw::c_int,
                            optInMaxPeriod: ::std::os::raw::c_int,
                            optInMAType: TA_MAType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAX(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAX(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAXINDEX(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAXINDEX(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inReal: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAXINDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MEDPRICE(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                       inLow: *const f64,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MEDPRICE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                         inLow: *const f32,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MEDPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MFI(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                  inLow: *const f64, inClose: *const f64,
                  inVolume: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MFI(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                    inLow: *const f32, inClose: *const f32,
                    inVolume: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MFI_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIDPOINT(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIDPOINT(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inReal: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIDPOINT_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIDPRICE(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                       inLow: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIDPRICE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                         inLow: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIDPRICE_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIN(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIN(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIN_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MININDEX(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outInteger: *mut ::std::os::raw::c_int) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MININDEX(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inReal: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outInteger: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_MININDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINMAX(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f64,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outMin: *mut f64, outMax: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINMAX(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal: *const f32,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outMin: *mut f64, outMax: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINMAX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINMAXINDEX(startIdx: ::std::os::raw::c_int,
                          endIdx: ::std::os::raw::c_int, inReal: *const f64,
                          optInTimePeriod: ::std::os::raw::c_int,
                          outBegIdx: *mut ::std::os::raw::c_int,
                          outNBElement: *mut ::std::os::raw::c_int,
                          outMinIdx: *mut ::std::os::raw::c_int,
                          outMaxIdx: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINMAXINDEX(startIdx: ::std::os::raw::c_int,
                            endIdx: ::std::os::raw::c_int, inReal: *const f32,
                            optInTimePeriod: ::std::os::raw::c_int,
                            outBegIdx: *mut ::std::os::raw::c_int,
                            outNBElement: *mut ::std::os::raw::c_int,
                            outMinIdx: *mut ::std::os::raw::c_int,
                            outMaxIdx: *mut ::std::os::raw::c_int)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINMAXINDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINUS_DI(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                       inLow: *const f64, inClose: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINUS_DI(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                         inLow: *const f32, inClose: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINUS_DI_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINUS_DM(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                       inLow: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINUS_DM(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                         inLow: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINUS_DM_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MOM(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MOM(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MOM_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MULT(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal0: *const f64,
                   inReal1: *const f64, outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MULT(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal0: *const f32,
                     inReal1: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MULT_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_NATR(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                   inLow: *const f64, inClose: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_NATR(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                     inLow: *const f32, inClose: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_NATR_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_OBV(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  inVolume: *const f64, outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_OBV(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    inVolume: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_OBV_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PLUS_DI(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                      inLow: *const f64, inClose: *const f64,
                      optInTimePeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PLUS_DI(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                        inLow: *const f32, inClose: *const f32,
                        optInTimePeriod: ::std::os::raw::c_int,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PLUS_DI_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PLUS_DM(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                      inLow: *const f64,
                      optInTimePeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PLUS_DM(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                        inLow: *const f32,
                        optInTimePeriod: ::std::os::raw::c_int,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PLUS_DM_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PPO(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInFastPeriod: ::std::os::raw::c_int,
                  optInSlowPeriod: ::std::os::raw::c_int,
                  optInMAType: TA_MAType,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PPO(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInFastPeriod: ::std::os::raw::c_int,
                    optInSlowPeriod: ::std::os::raw::c_int,
                    optInMAType: TA_MAType,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PPO_Lookback(optInFastPeriod: ::std::os::raw::c_int,
                           optInSlowPeriod: ::std::os::raw::c_int,
                           optInMAType: TA_MAType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROC(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROC(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROC_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCP(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCP(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCP_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCR(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCR(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCR_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCR100(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inReal: *const f64,
                      optInTimePeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCR100(startIdx: ::std::os::raw::c_int,
                        endIdx: ::std::os::raw::c_int, inReal: *const f32,
                        optInTimePeriod: ::std::os::raw::c_int,
                        outBegIdx: *mut ::std::os::raw::c_int,
                        outNBElement: *mut ::std::os::raw::c_int,
                        outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCR100_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_RSI(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_RSI(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_RSI_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SAR(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                  inLow: *const f64, optInAcceleration: f64,
                  optInMaximum: f64, outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SAR(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                    inLow: *const f32, optInAcceleration: f64,
                    optInMaximum: f64, outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SAR_Lookback(optInAcceleration: f64, optInMaximum: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SAREXT(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                     inLow: *const f64, optInStartValue: f64,
                     optInOffsetOnReverse: f64,
                     optInAccelerationInitLong: f64,
                     optInAccelerationLong: f64,
                     optInAccelerationMaxLong: f64,
                     optInAccelerationInitShort: f64,
                     optInAccelerationShort: f64,
                     optInAccelerationMaxShort: f64,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SAREXT(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                       inLow: *const f32, optInStartValue: f64,
                       optInOffsetOnReverse: f64,
                       optInAccelerationInitLong: f64,
                       optInAccelerationLong: f64,
                       optInAccelerationMaxLong: f64,
                       optInAccelerationInitShort: f64,
                       optInAccelerationShort: f64,
                       optInAccelerationMaxShort: f64,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SAREXT_Lookback(optInStartValue: f64, optInOffsetOnReverse: f64,
                              optInAccelerationInitLong: f64,
                              optInAccelerationLong: f64,
                              optInAccelerationMaxLong: f64,
                              optInAccelerationInitShort: f64,
                              optInAccelerationShort: f64,
                              optInAccelerationMaxShort: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SIN(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SIN(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SIN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SINH(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SINH(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SINH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SMA(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SMA(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SMA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SQRT(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SQRT(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SQRT_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STDDEV(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f64,
                     optInTimePeriod: ::std::os::raw::c_int, optInNbDev: f64,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STDDEV(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal: *const f32,
                       optInTimePeriod: ::std::os::raw::c_int,
                       optInNbDev: f64, outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STDDEV_Lookback(optInTimePeriod: ::std::os::raw::c_int,
                              optInNbDev: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCH(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                    inLow: *const f64, inClose: *const f64,
                    optInFastK_Period: ::std::os::raw::c_int,
                    optInSlowK_Period: ::std::os::raw::c_int,
                    optInSlowK_MAType: TA_MAType,
                    optInSlowD_Period: ::std::os::raw::c_int,
                    optInSlowD_MAType: TA_MAType,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outSlowK: *mut f64, outSlowD: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCH(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                      inLow: *const f32, inClose: *const f32,
                      optInFastK_Period: ::std::os::raw::c_int,
                      optInSlowK_Period: ::std::os::raw::c_int,
                      optInSlowK_MAType: TA_MAType,
                      optInSlowD_Period: ::std::os::raw::c_int,
                      optInSlowD_MAType: TA_MAType,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outSlowK: *mut f64, outSlowD: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCH_Lookback(optInFastK_Period: ::std::os::raw::c_int,
                             optInSlowK_Period: ::std::os::raw::c_int,
                             optInSlowK_MAType: TA_MAType,
                             optInSlowD_Period: ::std::os::raw::c_int,
                             optInSlowD_MAType: TA_MAType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCHF(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                     inLow: *const f64, inClose: *const f64,
                     optInFastK_Period: ::std::os::raw::c_int,
                     optInFastD_Period: ::std::os::raw::c_int,
                     optInFastD_MAType: TA_MAType,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outFastK: *mut f64, outFastD: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCHF(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                       inLow: *const f32, inClose: *const f32,
                       optInFastK_Period: ::std::os::raw::c_int,
                       optInFastD_Period: ::std::os::raw::c_int,
                       optInFastD_MAType: TA_MAType,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outFastK: *mut f64, outFastD: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCHF_Lookback(optInFastK_Period: ::std::os::raw::c_int,
                              optInFastD_Period: ::std::os::raw::c_int,
                              optInFastD_MAType: TA_MAType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCHRSI(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inReal: *const f64,
                       optInTimePeriod: ::std::os::raw::c_int,
                       optInFastK_Period: ::std::os::raw::c_int,
                       optInFastD_Period: ::std::os::raw::c_int,
                       optInFastD_MAType: TA_MAType,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outFastK: *mut f64, outFastD: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCHRSI(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inReal: *const f32,
                         optInTimePeriod: ::std::os::raw::c_int,
                         optInFastK_Period: ::std::os::raw::c_int,
                         optInFastD_Period: ::std::os::raw::c_int,
                         optInFastD_MAType: TA_MAType,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outFastK: *mut f64, outFastD: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCHRSI_Lookback(optInTimePeriod: ::std::os::raw::c_int,
                                optInFastK_Period: ::std::os::raw::c_int,
                                optInFastD_Period: ::std::os::raw::c_int,
                                optInFastD_MAType: TA_MAType)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SUB(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal0: *const f64,
                  inReal1: *const f64, outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SUB(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal0: *const f32,
                    inReal1: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SUB_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SUM(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SUM(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SUM_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_T3(startIdx: ::std::os::raw::c_int,
                 endIdx: ::std::os::raw::c_int, inReal: *const f64,
                 optInTimePeriod: ::std::os::raw::c_int, optInVFactor: f64,
                 outBegIdx: *mut ::std::os::raw::c_int,
                 outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_T3(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f32,
                   optInTimePeriod: ::std::os::raw::c_int, optInVFactor: f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_T3_Lookback(optInTimePeriod: ::std::os::raw::c_int,
                          optInVFactor: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TAN(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TAN(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TANH(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TANH(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TANH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TEMA(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TEMA(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TEMA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRANGE(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                     inLow: *const f64, inClose: *const f64,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRANGE(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                       inLow: *const f32, inClose: *const f32,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRANGE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRIMA(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f64,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRIMA(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inReal: *const f32,
                      optInTimePeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRIMA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRIX(startIdx: ::std::os::raw::c_int,
                   endIdx: ::std::os::raw::c_int, inReal: *const f64,
                   optInTimePeriod: ::std::os::raw::c_int,
                   outBegIdx: *mut ::std::os::raw::c_int,
                   outNBElement: *mut ::std::os::raw::c_int,
                   outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRIX(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inReal: *const f32,
                     optInTimePeriod: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRIX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TSF(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TSF(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TSF_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TYPPRICE(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                       inLow: *const f64, inClose: *const f64,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TYPPRICE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                         inLow: *const f32, inClose: *const f32,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TYPPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ULTOSC(startIdx: ::std::os::raw::c_int,
                     endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                     inLow: *const f64, inClose: *const f64,
                     optInTimePeriod1: ::std::os::raw::c_int,
                     optInTimePeriod2: ::std::os::raw::c_int,
                     optInTimePeriod3: ::std::os::raw::c_int,
                     outBegIdx: *mut ::std::os::raw::c_int,
                     outNBElement: *mut ::std::os::raw::c_int,
                     outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ULTOSC(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                       inLow: *const f32, inClose: *const f32,
                       optInTimePeriod1: ::std::os::raw::c_int,
                       optInTimePeriod2: ::std::os::raw::c_int,
                       optInTimePeriod3: ::std::os::raw::c_int,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ULTOSC_Lookback(optInTimePeriod1: ::std::os::raw::c_int,
                              optInTimePeriod2: ::std::os::raw::c_int,
                              optInTimePeriod3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_VAR(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int, optInNbDev: f64,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_VAR(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int, optInNbDev: f64,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_VAR_Lookback(optInTimePeriod: ::std::os::raw::c_int,
                           optInNbDev: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WCLPRICE(startIdx: ::std::os::raw::c_int,
                       endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                       inLow: *const f64, inClose: *const f64,
                       outBegIdx: *mut ::std::os::raw::c_int,
                       outNBElement: *mut ::std::os::raw::c_int,
                       outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WCLPRICE(startIdx: ::std::os::raw::c_int,
                         endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                         inLow: *const f32, inClose: *const f32,
                         outBegIdx: *mut ::std::os::raw::c_int,
                         outNBElement: *mut ::std::os::raw::c_int,
                         outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WCLPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WILLR(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inHigh: *const f64,
                    inLow: *const f64, inClose: *const f64,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WILLR(startIdx: ::std::os::raw::c_int,
                      endIdx: ::std::os::raw::c_int, inHigh: *const f32,
                      inLow: *const f32, inClose: *const f32,
                      optInTimePeriod: ::std::os::raw::c_int,
                      outBegIdx: *mut ::std::os::raw::c_int,
                      outNBElement: *mut ::std::os::raw::c_int,
                      outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WILLR_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WMA(startIdx: ::std::os::raw::c_int,
                  endIdx: ::std::os::raw::c_int, inReal: *const f64,
                  optInTimePeriod: ::std::os::raw::c_int,
                  outBegIdx: *mut ::std::os::raw::c_int,
                  outNBElement: *mut ::std::os::raw::c_int, outReal: *mut f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WMA(startIdx: ::std::os::raw::c_int,
                    endIdx: ::std::os::raw::c_int, inReal: *const f32,
                    optInTimePeriod: ::std::os::raw::c_int,
                    outBegIdx: *mut ::std::os::raw::c_int,
                    outNBElement: *mut ::std::os::raw::c_int,
                    outReal: *mut f64) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WMA_Lookback(optInTimePeriod: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SetUnstablePeriod(id: TA_FuncUnstId,
                                unstablePeriod: ::std::os::raw::c_uint)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetUnstablePeriod(id: TA_FuncUnstId) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TA_SetCompatibility(value: TA_Compatibility) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetCompatibility() -> TA_Compatibility;
}
extern "C" {
    pub fn TA_SetCandleSettings(settingType: TA_CandleSettingType,
                                rangeType: TA_RangeType,
                                avgPeriod: ::std::os::raw::c_int, factor: f64)
     -> TA_RetCode;
}
extern "C" {
    pub fn TA_RestoreCandleDefaultSettings(settingType: TA_CandleSettingType)
     -> TA_RetCode;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
